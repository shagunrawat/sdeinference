## Use the R_HOME indirection to support installations of multiple R version
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`

## PKG_CPPFLAGS = -DNDEBUG -I/usr/local/include -I/usr/lib64/R/library/Rcpp/lib/ -I/usr/lib64/R/library/RcppArmadillo/include -L/usr/local/lib -L/usr/lib64/R/library/Rcpp/lib/ -L/usr/lib64/R/library/RcppArmadillo/libs/ -L/opt/intel/mkl/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_core -lmkl_gnu_thread -ldl -lpthread -lgomp -O3 -m64 -march=native -mtune=native -fopenmp

MY_R_HOME = /home/shagun/R/x86_64-redhat-linux-gnu-library/3.3

PKG_CPPFLAGS = -DNDEBUG -I/usr/local/include -I$(MY_R_HOME)/Rcpp/lib/ -I$(MY_R_HOME)/RcppArmadillo/include -L/usr/local/lib -L$(MY_R_HOME)/Rcpp/lib/ -L$(MY_R_HOME)/RcppArmadillo/libs/ -L/opt/intel/mkl/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_core -lmkl_gnu_thread -ldl -lpthread -lgomp -O3 -m64 -march=native -mtune=native -fopenmp

## As an alternative, one can also add this code in a file 'configure'
##
##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
##
##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
##        src/Makevars.in > src/Makevars
##
## which together with the following file 'src/Makevars.in'
##
##    PKG_LIBS = @PKG_LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries.  It should be complemented by a file 'cleanup'
##
##    rm src/Makevars
##
## which removes the autogenerated file src/Makevars.
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.